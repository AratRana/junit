<project name="junit-example" basedir="." default="condTest" xmlns:jacoco="antlib:org.jacoco.ant">
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="lib/jacocoant.jar" />
	</taskdef>
	<property environment="env" />
	<property file="build.properties" />
	<property name="main.build.dir" value="build/main" />
	<property name="main.src.dir" value="src/main/java" />
	<property name="test.build.dir" value="build/test" />
	<property name="test.src.dir" value="src/test/java" />
	<property name="target.dir" location="build" />
	<property name="ant.build.directory" value="${basedir}/target/ant-build" />
	<property name="target.report.dir" location="${target.dir}/report" />
	<property name="reports.jacoco.final" value="${target.dir}/jacoco/jacoco-final.exec" />
	<property name="reports.jacoco.junit" value="${target.dir}/jacoco/jacoco-junit.exec" />

	<path id="classpath.test">
		<pathelement location="lib/junit-4.12.jar" />
		<pathelement location="lib/hamcrest-core-1.3.jar" />
		<pathelement location="${main.build.dir}" />
		<pathelement location="lib/jacocoant.jar" />
		<pathelement location="lib/jacocoagent.jar" />
	</path>
	<condition property="test_db" value="${LOAD_CHECK}" else="true">
		<equals arg1="${LOAD_CHECK}" arg2="true" trim="true" />
	</condition>
	<target name="setvars_base">
		<condition property="unittest.loaddb">
			<equals arg1="${LOAD_CHECK}" arg2="true" trim="true" />
		</condition>
	</target>
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="classpath.test" />
	</taskdef>
	<target name="compile" depends="setvars_base" description="compiling unit test" if="unittest.loaddb">
		<echo>Compiling source---------------------</echo>
		<mkdir dir="${main.build.dir}" />
		<javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false">
		</javac>
	</target>
	<target name="test-compile" depends="compile">
		<mkdir dir="${test.build.dir}" />
		<javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
			<classpath refid="classpath.test" />
		</javac>
	</target>

	<target name="test">
		<jacoco:coverage destfile="${reports.jacoco.junit}">
			<junit printsummary="on" haltonfailure="yes" fork="true">
				<classpath>
					<path refid="classpath.test" />
					<pathelement location="${test.build.dir}" />
				</classpath>
				<formatter type="brief" usefile="false" />
				<batchtest>
					<fileset dir="${test.src.dir}" includes="**/*rTest.java" excludes="**/*UnitTest.java" />
				</batchtest>
			</junit>
		</jacoco:coverage>
	</target>
	<target name="test1">
		<mkdir dir="${target.report.dir}" />
		<jacoco:coverage destfile="${reports.jacoco.junit}">
			<junit printsummary="on" haltonfailure="yes" fork="true" haltonerror="yes">
				<formatter type="plain" usefile="false" />
				<formatter type="xml" />
				<classpath>
					<path refid="classpath.test" />
					<pathelement location="${test.build.dir}" />
				</classpath>
				<!--<formatter type="brief" usefile="false" />-->
				<batchtest todir="${target.report.dir}">
					<fileset dir="${test.src.dir}">
						<include name="**/*UnitTest.java" />
						<exclude name="**/*rTest.java" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
	</target>
	<target name="run_all" depends="compile">
		<parallel>
			<antcall target="test" />
			<antcall target="test1" />
		</parallel>
		<antcall target="unittest_jacoco_reports" />
		<antcall target="unittest_generate_html"/>
	</target>
	<target name="run_all_seq" depends="compile">
		<echo message="$env.APPSERVER}" />
		<antcall target="test" />
		<antcall target="test1" />
	</target>

	<target name="hello" if="hello.set">
		<echo message="Hello, World" />
	</target>

	<target name="goodbye" unless="hello.set">
		<echo message="Goodbye, Cruel World" />
	</target>
	<target name="all" depends="hello,goodbye" />
	<target name="unittest_generate_html" depends="test,test1">
		<mkdir dir="${target.report.dir}/html" />		
			<junitreport todir="${target.report.dir}">
				<fileset dir="${target.report.dir}">
					<include name="TEST-*.xml" />
				</fileset>
				<report todir="${target.report.dir}/html" />
			</junitreport>		
	</target>
	<target name="condTest" if="test_db">
		<echo message="***************${unittest.loaddb}">
		</echo>
		<echo message="hellooooooooooooooooooooooooooooooooo">
		</echo>
	</target>

	<target name="unittest_jacoco_reports" depends="jacoco_merge">
		<jacoco:report>
			<executiondata>
				<file file="${reports.jacoco.final}" />
			</executiondata>
			<structure name="Jacoco example">
				<group name="first">
					<classfiles>
						<fileset dir="${main.build.dir}">
							<include name="com/**" />
						</fileset>
					</classfiles>
					<sourcefiles>
						<fileset dir="${main.src.dir}">
							<exclude name="com/ut/**" />
						</fileset>
					</sourcefiles>
				</group>
			</structure>
			<html destdir="${target.dir}/jacoco" />
		</jacoco:report>
	</target>
	<target name="jacoco_merge">
		<mkdir dir="${target.dir}/jacoco" />
		<jacoco:merge destfile="${reports.jacoco.final}">
			<fileset dir="${target.dir}/jacoco/" includes="*.exec" />
		</jacoco:merge>
	</target>
</project>